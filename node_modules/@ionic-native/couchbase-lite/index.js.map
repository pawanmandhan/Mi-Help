{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/couchbase-lite/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwHR,iCAAiB;;;;IAClD;;;OAGG;;;;;IAIH,8BAAM;;;;;QACJ,MAAM,CAAC;KACR;;gBAXF,UAAU;;;QAMR,OAAO,CAAC;YACP,aAAa,EAAE,MAAM;SACtB,CAAC;;;;+CAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAVU,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,gCAAgC;YACxC,SAAS,EAAE,QAAQ;YACnB,IAAI,EAAE,iEAAiE;YACvE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,aAAa,EAWzB;wBApID;EAyHmC,iBAAiB;SAAvC,aAAa","sourcesContent":["import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name Couchbase Lite\n * @description\n * Plugin to install Couchbase Lite in your PhoneGap app on iOS or Android\n *\n * @usage\n * ```typescript\n * import { CouchbaseLite } from '@ionic-native/couchbase-lite';\n * import { Http } from '@angular/http';\n * import { Observable } from 'rxjs/Observable'\n * constructor(private couchbase: CouchbaseLite, private platform:Platform,private _http:Http) {\n *    this.initMethod();\n * }\n * url:string;\n * initMethod() {\n *    this.couchbase.getURL().then((url)=> {\n *        this.url = url;\n *    })\n * }\n * getUrl() {\n *      return this.url;\n * }\n * // DATABASES //\n * createDatabase(database_name:string) {\n *      let url = this.getUrl();\n *      url = url+database_name;\n *      return this._http\n *        .put(url)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *         })\n *  }\n * deleteDatabase(database_name:string) {\n *      let url = this.getUrl();\n *      url = url+database_name;\n *      return this._http\n *        .delete(url)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })\n * }\n * getAllDbs() {\n *      let url = this.getUrl();\n *      url = url+'_all_dbs';\n *      return this._http\n *        .get(url)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })\n * }\n * // DOCUMENTS //\n * getAllDocuments(database_name:string){\n *      let url = this.getUrl();\n *      // include_docs=true will include a doc inside response, it is false by default\n *      url = url + database_name + '/_all_docs?include_docs=true';\n *      return this._http\n *        .get(url)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })        .\n * }\n * createDocument(database_name:string,document){\n *      let url = this.getUrl();\n *      url = url + database_name;\n *      return this._http\n *        .post(url,document)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })        .\n * }\n * let document = {\n *    _id:'You can either specify the document ID (must be string) else couchbase generates one for your doc',\n *    data:{name:'sandman',age:25,city:pune}\n *  }\n * createDocument('justbe', document);\n * // successful response\n * { \"id\": \"string\",\"rev\": \"string\",\"ok\": true }\n * updateDocument(database_name:string,document){\n *      let url = this.getUrl();\n *      url = url + database_name + '/' + document._id;\n *      return this._http\n *        .put(url,document)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })        .\n * }\n * // for updation of document your document must contain most recent rev(revision) id.\n * // for each updation of document new rev id is get generated\n * // successful response\n * { \"id\": \"string\",\"rev\": \"string(new revision id)\",\"ok\": true }\n * deleteDocument(database_name:string,document){\n *      let url = this.getUrl();\n *      url = url + database_name + '/' + document._id +'?rev='+doc._rev;\n *      return this._http\n *        .delete(url)\n *        .map(data => { this.results = data['results'] })\n *        .catch((error:any) => {\n *           return Observable.throw(error.json() || 'Couchbase Lite error');\n *        })        .\n * }\n *\n *\n * ```\n */\n@Plugin({\n  pluginName: 'CouchbaseLite',\n  plugin: 'couchbase-lite-phonegap-plugin',\n  pluginRef: 'cblite',\n  repo: 'https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class CouchbaseLite extends IonicNativePlugin {\n  /**\n   * Get the database url\n   * @return {Promise<any>} Returns a promise that resolves with the local database url\n   */\n  @Cordova({\n    callbackStyle: 'node'\n  })\n  getURL(): Promise<any> {\n    return;\n  }\n}\n"]}