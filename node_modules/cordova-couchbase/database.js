"use strict";
var es6_promise_1 = require("es6-promise");
var Database = (function () {
    function Database(databaseUrl, databaseName) {
        this.databaseUrl = databaseUrl;
        this.databaseName = databaseName;
    }
    Database.prototype.getUrl = function () {
        return this.databaseUrl;
    };
    Database.prototype.createDatabase = function () {
        return this.makeRequest("PUT", this.databaseUrl + this.databaseName);
    };
    Database.prototype.getDatabase = function () {
        return this.makeRequest("GET", this.databaseUrl + this.databaseName);
    };
    Database.prototype.createDesignDocument = function (designDocumentName, designDocumentViews) {
        var data = {
            views: designDocumentViews
        };
        var designPrefix = "";
        if (designDocumentName.indexOf("_design/") === -1) {
            designPrefix = "_design/";
        }
        return this.makeRequest("PUT", this.databaseUrl + this.databaseName + "/" + designPrefix + designDocumentName, {}, data, true);
    };
    Database.prototype.getDesignDocument = function (designDocumentName) {
        var designPrefix = "";
        if (designDocumentName.indexOf("_design/") === -1) {
            designPrefix = "_design/";
        }
        return this.makeRequest("GET", this.databaseUrl + this.databaseName + "/" + designPrefix + designDocumentName);
    };
    Database.prototype.queryView = function (designDocumentName, viewName, options) {
        return this.makeRequest("GET", this.databaseUrl + this.databaseName + "/" + designDocumentName + "/_view/" + viewName, options);
    };
    Database.prototype.createDocument = function (jsonDocument) {
        return this.makeRequest("POST", this.databaseUrl + this.databaseName, {}, jsonDocument, true);
    };
    Database.prototype.createLocalDocument = function (documentId, jsonDocument) {
        return this.makeRequest("PUT", this.databaseUrl + this.databaseName + "/_local/" + documentId, {}, jsonDocument);
    };
    Database.prototype.updateDocument = function (documentId, documentRevision, jsonDocument) {
        return this.makeRequest("PUT", this.databaseUrl + this.databaseName + "/" + documentId, { rev: documentRevision }, jsonDocument);
    };
    Database.prototype.deleteDocument = function (documentId, documentRevision) {
        return this.makeRequest("DELETE", this.databaseUrl + this.databaseName + "/" + documentId, { rev: documentRevision });
    };
    Database.prototype.getAllDocuments = function () {
        return this.makeRequest("GET", this.databaseUrl + this.databaseName + "/_all_docs");
    };
    Database.prototype.getDocument = function (documentId) {
        return this.makeRequest("GET", this.databaseUrl + this.databaseName + "/" + documentId);
    };
    Database.prototype.getLocalDocument = function (documentId) {
        return this.makeRequest("GET", this.databaseUrl + this.databaseName + "/_local/" + documentId);
    };
    Database.prototype.replicate = function (source, target, continuous) {
        return this.makeRequest("POST", this.databaseUrl + "_replicate", {}, { source: source, target: target, continuous: continuous }, true);
    };
    Database.prototype.sync = function (target, continuous) {
        var _this = this;
        return this.replicate(this.databaseName, target, continuous).then(function (result) {
            return _this.replicate(target, _this.databaseName, continuous);
        });
    };
    Database.prototype.listen = function (callback) {
        document.addEventListener("couchbase", callback, false);
        this.poller(0);
    };
    Database.prototype.poller = function (cseq) {
        var _this = this;
        this.makeRequest("GET", this.databaseUrl + this.databaseName + "/_changes", { feed: "longpoll", since: cseq }, null, false, true).then(function (result) {
            _this.customEvent = new CustomEvent("couchbase", { detail: result.results });
            document.dispatchEvent(_this.customEvent);
            setTimeout(function () {
                _this.poller(result.last_seq);
            }, 10);
        });
    };
    Database.prototype.getActiveTasks = function () {
        return this.makeRequest("GET", this.databaseUrl + "_active_tasks");
    };
    Database.prototype.makeRequest = function (method, url, params, data, isJson, withCredentials) {
        var _this = this;
        return new es6_promise_1.Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            if (params) {
                url += "?" + _this.serializeQueryParameters(params);
            }
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200 || xhr.status == 201) {
                        resolve(JSON.parse(xhr.response));
                    }
                    else {
                        reject(JSON.parse(xhr.response));
                    }
                }
            };
            xhr.open(method, url, true);
            if (isJson) {
                xhr.setRequestHeader("Content-Type", "application/json");
            }
            if (withCredentials) {
                xhr.withCredentials = true;
            }
            if (data) {
                xhr.send(JSON.stringify(data));
            }
            else {
                xhr.send();
            }
        });
    };
    Database.prototype.serializeQueryParameters = function (params) {
        var serialized = "";
        for (var key in params) {
            if (serialized != "") {
                serialized += "&";
            }
            serialized += key + "=" + encodeURIComponent(params[key]);
        }
        return serialized;
    };
    return Database;
}());
exports.Database = Database;
